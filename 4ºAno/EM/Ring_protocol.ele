open util/ordering[Id]

sig Node {
	id: one Id,
	succ : one Node,
	var inbox : set Id,
	var outbox : set Id 	
}

sig Id {}

fact ring{
	all i: Id | lone id.i
	all n : Node | Node in n.^succ	
}

//para podermos sempre saber qual o conjunto de nos que sao eleitos para lideres
// once ou seja qql nodo que ja recebeu alguma vez o seu proprio id
fun elected : set Node {
	{n : Node | once (n.id in n.inbox)}
}


// transmite as mensagens
pred send [n: Node]{
	//some n.outbox
	some i : n.outbox{
		// retira o id da outbox do n
		n.outbox' = n.outbox - i
		// poe o id na inbox do proximo node
		n.succ.inbox' = n.succ.inbox + i
	}
	// os outros nodes nao mudam pq so envio um de cada vez
	all m : Node - n.succ | m.inbox' = m.inbox
	all m : Node - n | m.outbox' = m.outbox
}


//versao mais clean
// pred send[n:Node]{
	// some i : n.outbox(
	//n.outbox' = outbox-n->i
	//n.inbox' = inbox-n.succ->i
	//)
//}

//processar a os id nas inbox
pred compute [n : Node] {
	some i : n.inbox {
		// retiro o id da inbox
		n.inbox'= n.inbox - i
		// coloca na outbox se o id a verificar
		// for maior que o seu proprio 
		//lte[i,n,id] implies n.outbox' =n.outbox else n.outbox'=n.outbox +i
		n.outbox'= n.outbox + (i - n.id.*(~next))
	}
	all m : Node - n | m.inbox'= m.inbox
	all m : Node - n | m.outbox'= m.outbox
}


pred skip{
	
	inbox'=inbox
	outbox'=outbox
}

fact init{
	no inbox
	outbox=id
}

fact transitions {
	always (skip or some n : Node | send[n] or compute[n])
}

run{}

run{eventually some elected} for 3 Id, exactly 3 Node, exactly 6 steps

assert safety{
	always lone elected
}
check safety{}

assert liveness {
	eventually some elected
}
check liveness{}






